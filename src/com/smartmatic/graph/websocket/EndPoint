@ServerEndpoint("/graphWebSocket")
@Stateless
public class EndPoint {

    private List<MySubscriber> observers;
    
    	  @OnMessage
	  public String receiveMessage(String message, Session session) {
	  	    MySubscriberComparator comparator = new MySubscriber.MySubscriberComparator();
		    JsonObject jObject = (JsonObject) new JsonParser().parse(message);
		    String type = jObject.get("type");
		    String region = jObject.get("region");
		    if (t.compareIgnoreCase("subscribe")) {
		    	int index = Collections.binarySearch(observers, )
			//TODO: implementarlo de otra manera, con una mapa key=region, value=subscriber
		    	if ( Collection )//TODO: implements comparator in the subscriber class
		    }
	  }

	  @OnOpen
	  public void open(final Session session) throws IOException {
		    log.info("Session opened:" + session.getId());
	  }

	  @OnClose
	  public void close(Session session, CloseReason c) {
		    log.info("Session closed:" + session.getId());
	  }

}
