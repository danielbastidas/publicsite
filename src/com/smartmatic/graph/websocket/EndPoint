@ServerEndpoint("/graphWebSocket")
@Stateless
public class EndPoint {

    	  private final static String SUBSCRIBER_KEY="SUBSCRIBER";
	  
	  @EJB
	  private IObserver observerBean;
    
    	  @OnMessage
	  public String receiveMessage(String message, Session session) {
	  	    //TODO: eliminar comparator del observer
		    //MySubscriberComparator comparator = new MySubscriber.MySubscriberComparator();
		    JsonObject jObject = (JsonObject) new JsonParser().parse(message);
		    String type = jObject.get("type");
		    String region = jObject.get("region");
		    if (t.compareIgnoreCase("subscribe")) {
		    	MySubscriber subscriber = new MySubscriber(session)
			MyObservable observable = observerBean.get(region);
		    	if ( observable != null ) {
				observable.subscribe(subscriber);
			} else {
				observable = new MyObservable();
				observable.setCandidate1(0);
				observable.setCandidate2(0);
				observable.getObserver().subscribe(subscriber);
			}
			session.getUserProperties().put(SUBSCRIBER_KEY, subscriber);
		    } else if (t.compareIgnoreCase("unsubscribe")) {
		    	//TODO:unsubscribe the current subscriber. Para almacenar el current subscriber se puede poner en la session
			//subscriber.dispose();
			Disposable subscriber = (Disposable) session.getUserProperties().get(SUBSCRIBER_KEY);
			if (subscriber != null) {
				// unsubscribe to avoid subscribers leak
				subscriber.dispose();
			}
		    }
	  }

	  @OnOpen
	  public void open(final Session session) throws IOException {
		    log.info("Session opened:" + session.getId());
	  }

	  @OnClose
	  public void close(Session session, CloseReason c) {
		    log.info("Session closed:" + session.getId());
	  }

}
